{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Admin password"
            }
        },
        "serviceDnsName": {
            "type": "string",
            "metadata": {
                "description": "DNS prefix for the region's cloud app service. (e.g. 'microsoft' => 'microsoft.westus2.cloudapp.azure.com')"
            }
        },
        "keyVaultName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Azure Key Vault instance containing the guardian and SSL certificates"
            }
        },
        "sslCertificateUri": {
            "type": "string",
            "metadata": {
                "description": "A versioned Azure KeyVault secret URI for the SSL certificate"
            }
        },
        "sslCertificateThumbprint": {
            "type": "securestring",
            "metadata": {
                "description": "The thumbprint of the SSL certificate."
            }
        },
        "guardianEncryptionCertificateUri": {
            "type": "string",
            "metadata": {
                "description": "A versioned Azure KeyVault secret URI for the HGS default guardian's encryption certificate."
            }
        },
        "guardianEncryptionCertificateThumbprint": {
            "type": "securestring",
            "metadata": {
                "description": "The thumbprint of the HGS default guardian's encryption certificate."
            }
        },
        "guardianSigningCertificateUri": {
            "type": "string",
            "metadata": {
                "description": "A versioned Azure KeyVault secret URI for the HGS default guardian's signing certificate."
            }
        },
        "guardianSigningCertificateThumbprint": {
            "type": "securestring",
            "metadata": {
                "description": "The thumbprint of the HGS default guardian's signing certificate."
            }
        }
    },
    "variables": {
        "keyVaultResourceGroup": "HGS-as-IaaS-Shared-Assets",
        "adminUsername": "hgsadmin",
        "vmNamePrefix": "HGS-NODE",
        "lbName": "HGS-LoadBalancer",
        "nicNamePrefix": "HGS-NIC",
        "publicIPAddressName": "HGS-PublicIP",
        "vnetName": "HGS-VNET",
        "vmDiskNamePrefix": "HGS-DISK",
        "vmSize": "Standard_DS1_V2",
        "availabilitySetName": "HGS-AvailabilitySet",
        "availabilitySetPlatformFaultDomainCount": 2,
        "availabilitySetPlatformUpdateDomainCount": 2,
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet-1",
        "subnetPrefix": "10.0.0.0/24",
        "subnetdns": "10.0.0.1",
        "publicIPAddressType": "Dynamic",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables ('subnetName'))]",
        "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
        "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
        "lbrulePrefix": "lbRule",
        "lbprobePrefix": "lbprobe",
        "numberOfInstances": 2,
        "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontend')]",
        "DSCInitScriptFolder": "https://raw.githubusercontent.com/rpsqrd/HGS-POC/master/scripts/",
        "DSCInitScriptFileName": "dscinit.ps1",
        "CloudWitnessStorageName": "[concat('witness', uniqueString(subscription().subscriptionId))]"
    },
    "resources": [
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('availabilitySetName')]",
            "apiVersion": "2016-04-30-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "platformFaultDomainCount": "[variables('availabilitySetPlatformFaultDomainCount')]",
                "platformUpdateDomainCount": "[variables('availabilitySetPlatformUpdateDomainCount')]",
                "managed": true
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('serviceDnsName')]"
                }
            }
        },
        {
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "name": "[variables('vnetName')]",
            "type": "Microsoft.Network/virtualNetworks",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "dhcpOptions": {
                    "dnsServers": [
                        "[variables('subnetdns')]",
                        "8.8.8.8"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('nicNamePrefix'), copyindex())]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "nicLoop",
                "count": "[variables('numberOfInstances')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('lbName'), '/inboundNatRules/', 'RDP-VM', copyIndex())]",
                "[concat('Microsoft.Network/loadBalancers/', variables('lbName'), '/inboundNatRules/', 'WINRM-VM-HTTP', copyIndex())]",
                "[concat('Microsoft.Network/loadBalancers/', variables('lbName'), '/inboundNatRules/', 'WINRM-VM-HTTPS', copyIndex())]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[concat('10.0.0.', copyindex(1))]",
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('lbID'), '/backendAddressPools/LoadBalancerBackend')]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('lbID'),'/inboundNatRules/RDP-VM', copyindex())]"
                                },
                                {
                                    "id": "[concat(variables('lbID'),'/inboundNatRules/WINRM-VM-HTTP', copyindex())]"
                                },
                                {
                                    "id": "[concat(variables('lbID'),'/inboundNatRules/WINRM-VM-HTTPS', copyindex())]"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "name": "[variables('lbName')]",
            "type": "Microsoft.Network/loadBalancers",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontend",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('publicIPAddressID')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "LoadBalancerBackend"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbname')), '/frontendIpConfigurations/LoadBalancerFrontend')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbname')), '/backendAddressPools/LoadBalancerBackend')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbname')), '/probes/lbprobe443')]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 443,
                            "backendPort": 443,
                            "idleTimeoutInMinutes": 15
                        },
                        "name": "[concat(variables('lbrulePrefix'), '443')]"
                    }
                ],
                "probes": [
                    {
                        "properties": {
                            "protocol": "Tcp",
                            "port": 443,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        },
                        "name": "[concat(variables('lbprobePrefix'), '443')]"
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "name": "[concat(variables('lbName'), '/', 'RDP-VM', copyIndex())]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "lbNatLoop",
                "count": "[variables('numberOfInstances')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
            ],
            "properties": {
                "frontendIPConfiguration": {
                    "id": "[variables('frontEndIPConfigID')]"
                },
                "protocol": "tcp",
                "frontendPort": "[copyIndex(40000)]",
                "backendPort": 3389,
                "enableFloatingIP": false
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "name": "[concat(variables('lbName'), '/', 'WINRM-VM-HTTP', copyIndex())]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "lbNatLoop",
                "count": "[variables('numberOfInstances')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
            ],
            "properties": {
                "frontendIPConfiguration": {
                    "id": "[variables('frontEndIPConfigID')]"
                },
                "protocol": "tcp",
                "frontendPort": "[copyIndex(50000)]",
                "backendPort": 5985,
                "enableFloatingIP": false
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "name": "[concat(variables('lbName'), '/', 'WINRM-VM-HTTPS', copyIndex())]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "lbNatLoop",
                "count": "[variables('numberOfInstances')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
            ],
            "properties": {
                "frontendIPConfiguration": {
                    "id": "[variables('frontEndIPConfigID')]"
                },
                "protocol": "tcp",
                "frontendPort": "[copyIndex(51000)]",
                "backendPort": 5986,
                "enableFloatingIP": false
            }
        },
        {
            "apiVersion": "2016-01-01",
            "name": "[variables('CloudWitnessStorageName')]",
            "location": "[resourceGroup().location]",
            "type": "Microsoft.Storage/storageAccounts",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "Storage",
            "properties": {
                "encryption": {
                    "services": {
                        "blob": {
                            "enabled": false
                        },
                        "file": null
                    },
                    "keySource": "Microsoft.Storage"
                }
            }
        },
        {
            "apiVersion": "2016-04-30-preview",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('vmNamePrefix'), copyindex())]",
            "copy": {
                "name": "virtualMachineLoop",
                "count": "[variables('numberOfInstances')]"
            },
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/',variables('nicNamePrefix'), copyindex())]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[concat(variables('vmNamePrefix'), copyIndex())]",
                    "adminUsername": "[variables('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "windowsConfiguration": {
                        "provisionVMAgent": true,
                        "winRM": {
                            "listeners": [
                                {
                                    "protocol": "http"
                                }
                            ]
                        },
                        "enableAutomaticUpdates": true
                    },
                    "secrets": [
                        {
                            "sourceVault": {
                                "id": "[resourceId(variables('keyVaultResourceGroup'), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                            },
                            "vaultCertificates": [
                                {
                                    "certificateUrl": "[parameters('sslCertificateUri')]",
                                    "certificateStore": "My"
                                },
                                {
                                    "certificateUrl": "[parameters('guardianEncryptionCertificateUri')]",
                                    "certificateStore": "My"
                                },
                                {
                                    "certificateUrl": "[parameters('guardianSigningCertificateUri')]",
                                    "certificateStore": "My"
                                }
                            ]
                        }
                    ]
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftWindowsServer",
                        "offer": "WindowsServer",
                        "sku": "2016-Datacenter",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(variables('vmDiskNamePrefix'), copyIndex())]",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        }
                    },
                    "dataDisks": []
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicNamePrefix'),copyindex()))]"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "name": "[concat('HGS-Configuration-', copyIndex())]",
                    "type": "extensions",
                    "location": "[resourceGroup().location]",
                    "apiVersion": "2015-06-15",
                    "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('vmNamePrefix'), copyindex()))]"
                    ],
                    "tags": {
                        "displayName": "[concat('DSCInit', copyIndex())]"
                    },
                    "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.4",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                            "fileUris": [
                                "[concat(variables('DSCInitScriptFolder') , variables('DSCInitScriptFileName'))]"
                            ],
                            "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ', variables('DSCInitScriptFileName') , concat(' -NodeType:', copyindex()) ,' -HgsServerPrimaryIPAddress 10.0.0.1',  concat(' -HgsServerPrimaryAdminUsername ', variables('adminUsername')), concat(' -HgsServerPrimaryAdminPassword ', parameters('adminPassword')), concat(' -SslCertificateThumbprint ', parameters('sslCertificateThumbprint')), concat(' -EncryptionCertificateThumbprint ', parameters('guardianEncryptionCertificateThumbprint')), concat(' -SigningCertificateThumbprint ', parameters('guardianSigningCertificateThumbprint')))]"
                        }
                    }
                }
            ]
        }
    ]
}